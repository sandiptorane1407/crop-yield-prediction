# -*- coding: utf-8 -*-
"""yield_prediction_output.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AuL9QyD1dnr_uaQB5nOz4wQ3hW1Nbt5l
"""

from google.colab import drive
drive.mount('/gdrive',force_remount=True)

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x 
import tensorflow as tf
import keras
from keras import backend as K
from keras import models
from keras import layers 
from keras import optimizers
from keras.models import model_from_json
import numpy as np
import pandas as pd

pip install flask_ngrok

from flask_ngrok import run_with_ngrok
from flask import Flask,render_template,request

# Commented out IPython magic to ensure Python compatibility.
# %mkdir templates -p #create templates directory 
# %mkdir static -p    #create static directory

!cp /gdrive/My\ Drive/Colab\ Notebooks/megaproject2/flask/state_district.js static/state_district.js   #copy javascript file to static directory
!cp /gdrive/My\ Drive/Colab\ Notebooks/megaproject2/flask/output.html templates/output.html            #copy html files to templates directory
!cp /gdrive/My\ Drive/Colab\ Notebooks/megaproject2/flask/yield_input.html templates/yield_input.html

def prod(input_district,input_year,input_season,input_crop,input_area):
  train=pd.read_csv('/gdrive/My Drive/Colab Notebooks/megaproject2/train.csv')
  district_data = pd.read_csv('/gdrive/My Drive/Colab Notebooks/megaproject2/Classified_data/district.csv')
  season_data = pd.read_csv('/gdrive/My Drive/Colab Notebooks/megaproject2/Classified_data/season.csv')
  crop_data = pd.read_csv('/gdrive/My Drive/Colab Notebooks/megaproject2/Classified_data/crop.csv')

  '''normalization for train'''
  cols_to_norm = ['Crop_Year']
  meanyear = train[cols_to_norm].mean()
  train[cols_to_norm] -= meanyear
  stdyear = train[cols_to_norm].std()
  train[cols_to_norm] /=stdyear


  cols_to_norm = ['Area']
  meanarea = train[cols_to_norm].mean()
  train[cols_to_norm] -= meanarea
  stdarea = train[cols_to_norm].std()
  train[cols_to_norm] /=stdarea

  cols_to_norm = ['Production']
  meanprod = train[cols_to_norm].mean()
  train[cols_to_norm] -= meanprod
  stdprod = train[cols_to_norm].std()
  train[cols_to_norm] /=stdprod

  input_year -=meanyear
  input_year /=stdyear
  input_area -=meanarea
  input_area /=stdarea

  # to convert string to integer 
  district1=district_data.loc[district_data['0']==input_district].index
  season1=season_data.loc[season_data['0']==input_season].index
  crop1=crop_data.loc[crop_data['0']==input_crop].index
  year1=input_year
  area1=input_area

  district1=np.asarray(district1,dtype='float32')
  year1=np.asarray(year1,dtype='float32')
  season1=np.asarray(season1,dtype='float32')
  crop1=np.asarray(crop1,dtype='float32')
  area1=np.asarray(area1,dtype='float32')
  
  K.clear_session()
  # load json and create model
  json_file = open('/gdrive/My Drive/Colab Notebooks/megaproject2/Saved_model/embedded_model4.json', 'r')
  loaded_model_json = json_file.read()
  json_file.close()
  loaded_model = model_from_json(loaded_model_json)
  # load weights into new model
  loaded_model.load_weights("/gdrive/My Drive/Colab Notebooks/megaproject2/Saved_model/embedded_model4.h5")

  loaded_model.compile(optimizer='RMSprop', loss='mse', metrics=['mape'])
  production=loaded_model.predict([district1,year1,season1,crop1,area1])
  K.clear_session()
  production*=stdprod
  production+=meanprod
  if production < 0:
    production=0
  production=production[0][0]  
  return(production)

app = Flask(__name__)
run_with_ngrok(app)
@app.route('/')
def home():
   return render_template('yield_input.html')

@app.route('/output',methods = ['POST', 'GET'])
def output():
   if request.method == 'POST':
      state = request.form['state']
      district=request.form['district']
      year=request.form['year']
      season=request.form['season']
      crop=request.form['crop']
      area=request.form['area']
      year=int(year)
      area=float(area)
      production=prod(district,year,season,crop,area)
      return render_template('output.html',state=state,district=district,year=year,season=season,crop=crop,area=area,production=production)

if __name__ == '__main__':
   app.run()